name: CICD

on:
  workflow_dispatch:
  # pull_request:
  #   branches: [ main, dev ]

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.image_tag.outputs.image_tag }} 
    
    steps:
    - uses: actions/checkout@v4

    # - name: Parse Azure Credentials
    #   run: |
    #     echo "AZURE_AD_APPLICATION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.appId')" >> $GITHUB_ENV
    #     echo "AZURE_AD_SP_PASSWORD=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.password')" >> $GITHUB_ENV

    - name: Set PORT Name
      id: env_port
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/cicd" ]]; then
          echo "PORT=80" >> $GITHUB_ENV
        fi

    - name: Setup Image Tag
      id: image_tag
      run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-10)" >> $GITHUB_OUTPUT

    - name: Build Docker image
      run: docker build . -t cloud_engineer:${{ steps.image_tag.outputs.image_tag }}

    - name: Run tests in Docker container
      run: docker run cloud_engineer:${{ steps.image_tag.outputs.image_tag }} npm test

    - name: Log in to the Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}


    - name: Set up Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Check if ACR exists
      id: acr_check
      run: |
        exists=$(az acr show --name ${{ secrets.ACR_NAME }} --query "name" -o tsv)
        echo "ACR_EXISTS=$exists" >> $GITHUB_ENV

    - name: Tag and push Docker image to ACR (Conditional)
      if: env.ACR_EXISTS != ''
      id: build_push
      run: |
        docker tag cloud_engineer:${{ steps.image_tag.outputs.image_tag }} ${{ secrets.ACR_NAME }}.azurecr.io/cloud_engineer:${{ steps.image_tag.outputs.image_tag }}
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/cloud_engineer:${{ steps.image_tag.outputs.image_tag }}

  deploy-to-azure:
    runs-on: ubuntu-latest
    needs: build
    # environment: development
    env:
      TF_VERSION: '1.7.4'
      TF_WORKING_DIR: './terraform'
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}    
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Run Terrascan
        id: terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'helm, k8s, terraform'
          iac_version: 'v4, v1, v17'
          iac_dir: ${{ env.TF_WORKING_DIR }}
          policy_type: 'azure'
          only_warn: true
          
      # TFLint - Terraform Check
      - uses: actions/cache@v2
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}
        

      - uses: terraform-linters/setup-tflint@v2
        name: Setup TFLint
        with:
          tflint_version: v0.50.3
          
            
      # Print TFLint version
      - name: Show version
        run: tflint --version
        working-directory: ${{ env.TF_WORKING_DIR }}
          
      # Install plugins
      - name: Init TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}
        working-directory: ${{ env.TF_WORKING_DIR }}
          
      # Run tflint command in each directory recursively # use --force if you want to continue with workflow although errors are there
      - name: Run TFLint
        run: tflint -f compact --recursive
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      # - name: Tfsec
      #   uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
      #   with:
      #     tfsec_args: --soft-fail
      #     github_token: ${{ github.token }}
      
      - name: Terraform Plan 
        run: terraform plan -no-color -input=false -out=tf.plan -var-file="terraform.tfvars.dev"
        continue-on-error: true
        working-directory: ${{ env.TF_WORKING_DIR }}

      # - name: Save Plan Output
      #   run: terraform show -no-color -json tf.plan > tfplan.json
      #   working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Apply
        env:
          GH_TOKEN: ${{ github.token }}
        run: terraform apply -auto-approve tf.plan
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Setup Kube Config File
        run: |
          echo "$(terraform output -raw kube_config_raw)"  > ./config
          chmod 400 ./config
          echo "KUBECONFIG=${PWD}/config" >> $GITHUB_ENV
        working-directory: ${{ env.TF_WORKING_DIR }}

      - uses: azure/setup-helm@v4.1.0
        id: install  
        with:
          version: 'latest'

      - name: Helm Deploy Service
        run: helm upgrade --install --set image.tag="${{ needs.build.outputs.image_tag }}" sample-api ./sample_api/ --namespace cloud-engineer --create-namespace
        working-directory: ${{ env.TF_WORKING_DIR }}
