name: CICD

on:
  workflow_dispatch:
  # pull_request:
  #   branches: [ main, dev ]

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.build_push.outputs.image_tag }} 
    
    steps:
    - uses: actions/checkout@v4

    # - name: Parse Azure Credentials
    #   run: |
    #     echo "AZURE_AD_APPLICATION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.appId')" >> $GITHUB_ENV
    #     echo "AZURE_AD_SP_PASSWORD=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.password')" >> $GITHUB_ENV

    - name: Set environment name
      id: env_setup
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "env_name=dev" >> $GITHUB_OUTPUT
        fi

    - name: Build Docker image
      run: docker build . -t cloud_engineer:${{ github.sha }}--${{ steps.env_setup.outputs.env_name }}-test

    - name: Run tests in Docker container
      run: docker run cloud_engineer:${{ github.sha }}--${{ steps.env_setup.outputs.env_name }}-test npm test

    - name: Log in to the Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}


    - name: Set up Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Check if ACR exists
      id: acr_check
      run: |
        exists=$(az acr show --name ${{ secrets.ACR_NAME }} --query "name" -o tsv)
        echo "ACR_EXISTS=$exists" >> $GITHUB_ENV

    - name: Tag and push Docker image to ACR (Conditional)
      if: env.ACR_EXISTS != ''
      id: build_push
      run: |
        docker tag cloud_engineer:${{ github.sha }}--${{ steps.env_setup.outputs.env_name }}-test ${{ secrets.ACR_NAME }}.azurecr.io/cloud_engineer:${{ github.sha }}--${{ steps.env_setup.outputs.env_name }}
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/cloud_engineer:${{ github.sha }}--${{ steps.env_setup.outputs.env_name }}
        echo "image_tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: build
    # environment: development
    env:
      TF_VERSION: '1.7.4'
      TF_WORKING_DIR: './terraform'
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}    
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate -no-color
      
      - name: Tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          tfsec_args: --soft-fail
          github_token: ${{ github.token }}
      
      - name: Terraform Plan 
        run: terraform plan -no-color -input=false -out=tf.plan -var-file="terraform.tfvars.dev"
        continue-on-error: true
        working-directory: ${{ env.TF_WORKING_DIR }}

      # - name: Save Plan Output
      #   run: terraform show -no-color -json tf.plan > tfplan.json
      #   working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Apply
        env:
          GH_TOKEN: ${{ github.token }}
        run: terraform apply -auto-approve tf.plan
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Output Raw Kubeconfig Content
        run: |
          terraform output kube_config | hexdump -C
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Setup Kube Config File
        run: |
          echo "$(terraform output kube_config)"  > ./config
          chmod 400 ./config
          echo "KUBECONFIG=${PWD}/config" >> $GITHUB_ENV
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Inspect Kubeconfig
        run: |
          cat $KUBECONFIG | sed -e 's/client-certificate-data: .*/client-certificate-data: REDACTED/' \
                                -e 's/client-key-data: .*/client-key-data: REDACTED/' \
                                | grep -v 'token:' \
                                | hexdump -C
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Log KUBECONFIG Path
        run: |
          echo "KUBECONFIG environment variable is set to: $KUBECONFIG"
          kubectl config view --minify | grep -v "client-key-data" | grep -v "client-certificate-data"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - uses: azure/setup-helm@v4.1.0
        id: install  
        with:
          version: 'latest'

      - name: Helm Deploy Service
        run: helm upgrade --install --set image.tag="${{ needs.build.outputs.image_tag }}" sample-api sample-api/ --namespace cloud-engineer --create-namespace